<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/id_coordinatorlayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true">

    <!--
          AppBarLayout跟它的名字一样，把容器类的组件全部作为AppBar。
              将AppBarLayout放在CoordinatorLayout中，就可以实现滚动效果。
              本例中，TabLayout在界面滚动时，随着Toolbar的逐渐隐藏，将占据Toolbar的位置，
                  达到节省屏幕空间，界面动画效果的目的。
      -->
    <android.support.design.widget.AppBarLayout
        android:id="@+id/id_appbarlayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">


        <android.support.v7.widget.Toolbar
            android:id="@+id/id_toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|enterAlways"
            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
            app:theme="@style/ThemeOverlay.AppCompat.ActionBar"
            app:title="@string/toolbar_title" />

        <!--
            Tabs选项卡，和ViewPager搭配使用可以增大界面的内容展示量，实现各种个性化分类内容展示而不互相干扰！
            Google在Design support library中提供官方的Tab组件，它就是TabLayout。
            相比Github上面开源的第三方库，这个更加简单易用。

            有以下常用属性：
                app:tabGravity="fill"  表示TabLayout中的Tabs要占满屏幕的width；
                app:tabSelectedTextColor：Tab被选中字体的颜色；
                app:tabTextColor：Tab未被选中字体的颜色；
                app:tabIndicatorColor：Tab指示器下标的颜色；
        -->
        <android.support.design.widget.TabLayout
            android:id="@+id/id_tablayout"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:tabGravity="fill"
            app:tabSelectedTextColor="@color/colorAccent"
            app:tabTextColor="@color/main_white"
            app:tabIndicatorColor="@color/colorAccent" />


    </android.support.design.widget.AppBarLayout>
    <!--
           我们常用的ViewPager，不多说了。你会发现多了一个 app:layout_behavior 属性，没错，
               如果你使用CoordinatorLayout来实现Toolbar滚动渐变消失动画效果，那就必须在它下面的那个控件中加入这个属性，
               并且下面的这个控件必须是可滚动的。
           当设置了layout_behavior的控件滑动时，就会触发设置了layout_scrollFlags的控件发生状态的改变。
       -->
    <android.support.v4.view.ViewPager
        android:id="@+id/id_viewpager"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        app:layout_behavior="@string/appbar_scrolling_view_behavior" />

</android.support.design.widget.CoordinatorLayout>
